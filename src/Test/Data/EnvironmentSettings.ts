import { EnvironmentSettings } from "@/Core";

const definition: EnvironmentSettings.DefinitionMap = {
  auto_deploy: {
    name: "auto_deploy",
    type: "bool",
    default: true,
    doc: "When this boolean is set to true, the orchestrator will automatically release a new version that was compiled by the orchestrator itself.",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
  push_on_auto_deploy: {
    name: "push_on_auto_deploy",
    type: "bool",
    default: true,
    doc: "Push a new version when it has been autodeployed.",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
  agent_trigger_method_on_auto_deploy: {
    name: "agent_trigger_method_on_auto_deploy",
    type: "enum",
    default: "push_incremental_deploy",
    doc: "The agent trigger method to use when push_on_auto_deploy is enabled",
    recompile: false,
    update_model: false,
    agent_restart: false,
    allowed_values: ["push_incremental_deploy", "push_full_deploy"],
  },
  environment_agent_trigger_method: {
    name: "environment_agent_trigger_method",
    type: "enum",
    default: "push_full_deploy",
    doc: "The agent trigger method to use. If push_on_auto_deploy is enabled, agent_trigger_method_on_auto_deploy overrides this setting",
    recompile: false,
    update_model: false,
    agent_restart: false,
    allowed_values: ["push_incremental_deploy", "push_full_deploy"],
  },
  autostart_splay: {
    name: "autostart_splay",
    type: "int",
    default: 10,
    doc: "[DEPRECATED] Splay time for autostarted agents.",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
  autostart_agent_deploy_interval: {
    name: "autostart_agent_deploy_interval",
    type: "int",
    default: 600,
    doc: "The deployment interval of the autostarted agents. See also: :inmanta.config:option:`config.agent-deploy-interval`",
    recompile: false,
    update_model: false,
    agent_restart: true,
  },
  autostart_agent_deploy_splay_time: {
    name: "autostart_agent_deploy_splay_time",
    type: "int",
    default: 10,
    doc: "The splay time on the deployment interval of the autostarted agents. See also: :inmanta.config:option:`config.agent-deploy-splay-time`",
    recompile: false,
    update_model: false,
    agent_restart: true,
  },
  autostart_agent_repair_interval: {
    name: "autostart_agent_repair_interval",
    type: "int",
    default: 86400,
    doc: "The repair interval of the autostarted agents. See also: :inmanta.config:option:`config.agent-repair-interval`",
    recompile: false,
    update_model: false,
    agent_restart: true,
  },
  autostart_agent_repair_splay_time: {
    name: "autostart_agent_repair_splay_time",
    type: "int",
    default: 600,
    doc: "The splay time on the repair interval of the autostarted agents. See also: :inmanta.config:option:`config.agent-repair-splay-time`",
    recompile: false,
    update_model: false,
    agent_restart: true,
  },
  autostart_on_start: {
    name: "autostart_on_start",
    type: "bool",
    default: true,
    doc: "Automatically start agents when the server starts instead of only just in time.",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
  autostart_agent_map: {
    name: "autostart_agent_map",
    type: "dict",
    default: {
      internal: "local:",
    },
    doc: "A dict with key the name of agents that should be automatically started. The value is either an empty string or an agent map string. See also: :inmanta.config:option:`config.agent-map`",
    recompile: false,
    update_model: false,
    agent_restart: true,
  },
  autostart_agent_interval: {
    name: "autostart_agent_interval",
    type: "int",
    default: 600,
    doc: "[DEPRECATED] Agent interval for autostarted agents in seconds",
    recompile: false,
    update_model: false,
    agent_restart: true,
  },
  server_compile: {
    name: "server_compile",
    type: "bool",
    default: true,
    doc: "Allow the server to compile the configuration model.",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
  resource_action_logs_retention: {
    name: "resource_action_logs_retention",
    type: "int",
    default: 7,
    doc: "The number of days to retain resource-action logs",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
  purge_on_delete: {
    name: "purge_on_delete",
    type: "bool",
    default: false,
    doc: "Enable purge on delete. When set to true, the server will detect the absence of resources with purge_on_delete set to true and automatically purges them.",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
  protected_environment: {
    name: "protected_environment",
    type: "bool",
    default: false,
    doc: "When set to true, this environment cannot be cleared, deleted or decommissioned.",
    recompile: false,
    update_model: false,
    agent_restart: false,
  },
};

export const base: EnvironmentSettings.EnvironmentSettings = {
  settings: {
    auto_deploy: false,
    server_compile: true,
    autostart_splay: 10,
    purge_on_delete: true,
    autostart_on_start: true,
    autostart_agent_map: {
      internal: "local:",
    },
    push_on_auto_deploy: true,
    protected_environment: false,
    autostart_agent_interval: 600,
    resource_action_logs_retention: 7,
    autostart_agent_deploy_interval: 600,
    autostart_agent_repair_interval: 86400,
    environment_agent_trigger_method: "push_full_deploy",
    autostart_agent_deploy_splay_time: 10,
    autostart_agent_repair_splay_time: 600,
    agent_trigger_method_on_auto_deploy: "push_incremental_deploy",
  },
  definition,
};

export const auto_deploy = {
  settings: { auto_deploy: true },
  definition,
};

export const autostart_agent_map = (extra: Record<string, string>) => ({
  settings: {
    autostart_agent_map: {
      internal: "local:",
      ...extra,
    },
  },
  definition,
});
