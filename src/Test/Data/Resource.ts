import { Resource } from "@/Core";

export const response = {
  data: [
    {
      resource_id: "std::File[agent2,path=/tmp/file4]",
      resource_version_id: "std::File[agent2,path=/tmp/file4],v=3",
      id_details: {
        resource_type: "std::File",
        agent: "agent2",
        attribute: "path",
        resource_id_value: "/tmp/file4",
      },
      requires: [
        "std::File[agent2,path=/etc/file3],v=3",
        "std::File[agent1,path=/etc/file2],v=3",
      ],
      status: "unavailable",
    },
    {
      resource_id: "std::File[agent2,path=/etc/file3]",
      resource_version_id: "std::File[agent2,path=/etc/file3],v=2",
      id_details: {
        resource_type: "std::File",
        agent: "agent2",
        attribute: "path",
        resource_id_value: "/etc/file3",
      },
      requires: [],
      status: "orphaned",
    },
    {
      resource_id: "std::File[agent1,path=/etc/file2]",
      resource_version_id: "std::File[agent1,path=/etc/file2],v=2",
      id_details: {
        resource_type: "std::File",
        agent: "agent1",
        attribute: "path",
        resource_id_value: "/etc/file2",
      },
      requires: [],
      status: "processing_events",
    },
    {
      resource_id: "std::File[agent1,path=/etc/file1]",
      resource_version_id: "std::File[agent1,path=/etc/file1],v=3",
      id_details: {
        resource_type: "std::File",
        agent: "agent1",
        attribute: "path",
        resource_id_value: "/etc/file1",
      },
      requires: [],
      status: "available",
    },
    {
      resource_id: "std::Directory[agent3,path=/tmp/dir6]",
      resource_version_id: "std::Directory[agent3,path=/tmp/dir6],v=3",
      id_details: {
        resource_type: "std::Directory",
        agent: "agent3",
        attribute: "path",
        resource_id_value: "/tmp/dir6",
      },
      requires: [],
      status: "deployed",
    },
    {
      resource_id: "std::Directory[agent2,path=/tmp/dir5]",
      resource_version_id: "std::Directory[agent2,path=/tmp/dir5],v=3",
      id_details: {
        resource_type: "std::Directory",
        agent: "agent2",
        attribute: "path",
        resource_id_value: "/tmp/dir5",
      },
      requires: [],
      status: "skipped",
    },
  ],
  links: { self: "/api/v2/resource?limit=20&sort=resource_type.DESC" },
  metadata: {
    total: 12,
    before: 0,
    after: 2,
    page_size: 10,
    deploy_summary: {
      total: 20,
      by_state: {
        deployed: 10,
        skipped: 1,
        skipped_for_undefined: 0,
        cancelled: 1,
        failed: 1,
        unavailable: 2,
        undefined: 2,
        deploying: 2,
        available: 1,
        processing_events: 2,
      },
    },
  },
};

export const responseFromVersion: Resource.ResponseFromVersion = {
  data: [
    {
      resource_id: "std::File[agent2,path=/tmp/file4]",
      resource_version_id: "std::File[agent2,path=/tmp/file4],v=3",
      id_details: {
        resource_type: "std::File",
        agent: "agent2",
        attribute: "path",
        resource_id_value: "/tmp/file4",
      },
      requires: [
        "std::File[agent2,path=/etc/file3],v=3",
        "std::File[agent1,path=/etc/file2],v=3",
      ],
    },
    {
      resource_id: "std::File[agent2,path=/etc/file3]",
      resource_version_id: "std::File[agent2,path=/etc/file3],v=2",
      id_details: {
        resource_type: "std::File",
        agent: "agent2",
        attribute: "path",
        resource_id_value: "/etc/file3",
      },
      requires: [],
    },
    {
      resource_id: "std::File[agent1,path=/etc/file2]",
      resource_version_id: "std::File[agent1,path=/etc/file2],v=2",
      id_details: {
        resource_type: "std::File",
        agent: "agent1",
        attribute: "path",
        resource_id_value: "/etc/file2",
      },
      requires: [],
    },
    {
      resource_id: "std::File[agent1,path=/etc/file1]",
      resource_version_id: "std::File[agent1,path=/etc/file1],v=3",
      id_details: {
        resource_type: "std::File",
        agent: "agent1",
        attribute: "path",
        resource_id_value: "/etc/file1",
      },
      requires: [],
    },
    {
      resource_id: "std::Directory[agent3,path=/tmp/dir6]",
      resource_version_id: "std::Directory[agent3,path=/tmp/dir6],v=3",
      id_details: {
        resource_type: "std::Directory",
        agent: "agent3",
        attribute: "path",
        resource_id_value: "/tmp/dir6",
      },
      requires: [],
    },
    {
      resource_id: "std::Directory[agent2,path=/tmp/dir5]",
      resource_version_id: "std::Directory[agent2,path=/tmp/dir5],v=3",
      id_details: {
        resource_type: "std::Directory",
        agent: "agent2",
        attribute: "path",
        resource_id_value: "/tmp/dir5",
      },
      requires: [],
    },
  ],
  links: { self: "/api/v2/resource?limit=20&sort=resource_type.DESC" },
  metadata: {
    total: 6,
    before: 0,
    after: 0,
    page_size: 20,
  },
};

export const id =
  "kubernetes_calico::resources::IPPool[dc-3,identifier=/cluster/dc-3/calicoctl/kc3-calicoctl/ippool/bb1-ip-pool-3]";

export const encodedId =
  "kubernetes_calico%3A%3Aresources%3A%3AIPPool%5Bdc-3%2Cidentifier%3D%2Fcluster%2Fdc-3%2Fcalicoctl%2Fkc3-calicoctl%2Fippool%2Fbb1-ip-pool-3%5D";

export const listOfIds = [
  "yang::Resource[kc1-router,name=data-network-internet1-1-1]",
  "yang::Resource[kc2-router,name=data-network-internet1-1-2]",
  "kubernetes::resources::Service[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/service/open5gs-db-svc]",
  "exec::Run[kc2-host,command=sh /tmp/tap-202-3.2002.sh up]",
  "kubernetes_calico::resources::IPPool[dc-3,identifier=/cluster/dc-3/calicoctl/kc3-calicoctl/ippool/bb1-ip-pool-3]",
  "std::File[kc1-host,path=/tmp/tap-201-3.2002.sh]",
  "kubernetes::resources::Deployment[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/deployment/open5gs-nssf-deployment]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-amf-config-map]",
  "kubernetes::resources::ClusterRoleBinding[dc-1,identifier=/cluster/dc-1/role-binding/system:serviceaccount:open5g:db]",
  "kubernetes::resources::ServiceAccount[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/service-account/db]",
  "kubernetes::resources::ClusterRole[dc-1,identifier=/cluster/dc-1/role/pod-service-endpoint-reader]",
  "std::File[kc2-host,path=/tmp/tap-202-3.1001.sh]",
  "kubernetes::resources::StatefulSet[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/stateful-set/open5gs-db-stateful-set]",
  "kubernetes_calico::resources::BGPPeer[dc-3,identifier=/cluster/dc-3/calicoctl/kc3-calicoctl/bgp-peer/back-bone-1-3]",
  "exec::Run[kc1-host,command=sh /tmp/tap-201-3.2002.sh up]",
  "kubernetes::resources::Service[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/service/open5gs-amf-svc-pool]",
  "std::AgentConfig[internal,agentname=dc-2]",
  "kubernetes::resources::StatefulSet[dc-2,identifier=/cluster/dc-2/namespace/ueransim-gnb-1/stateful-set/ueransim-gnb-0x11-stateful-set]",
  "kubernetes::resources::StatefulSet[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/stateful-set/open5gs-smf-stateful-set]",
  "exec::Run[kc1-host,command=sh /tmp/tap-201-3.1001.sh up]",
  "kubernetes::resources::Deployment[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/deployment/open5gs-nrf-deployment]",
  "exec::Run[kc2-host,command=sh /tmp/tap-202-3.1001.sh up]",
  "std::File[kc2-host,path=/tmp/tap-202-3.2002.sh]",
  "kubernetes_calico::resources::BGPPeer[dc-2,identifier=/cluster/dc-2/calicoctl/kc2-calicoctl/bgp-peer/data-network-internet1-1]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-ausf-config-map]",
  "kubernetes_calico::resources::FelixConfiguration[dc-3,identifier=/cluster/dc-3/calicoctl/kc3-calicoctl/felix-configuration/default]",
  "kubernetes_calico::resources::FelixConfiguration[dc-1,identifier=/cluster/dc-1/calicoctl/kc1-calicoctl/felix-configuration/default]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-nrf-config-map]",
  "kubernetes_calico::resources::IPPool[dc-1,identifier=/cluster/dc-1/calicoctl/kc1-calicoctl/ippool/bb1-ip-pool-1]",
  "kubernetes_calico::resources::IPPool[dc-1,identifier=/cluster/dc-1/calicoctl/kc1-calicoctl/ippool/reserved-data-network-internet1-1]",
  "kubernetes::resources::Deployment[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/deployment/open5gs-pcf-deployment]",
  "exec::Run[kc3-host,command=sh /tmp/tap-203-3.1001.sh up]",
  "kubernetes::resources::Secret[dc-2,identifier=/cluster/dc-2/namespace/ueransim-gnb-1/secret/image-pull-secret]",
  "yang::Resource[kc2-router,name=back-bone-1-2]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-pcf-config-map]",
  "kubernetes::resources::Secret[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/secret/image-pull-secret]",
  "kubernetes::resources::Service[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/service/open5gs-smf-svc-pool]",
  "kubernetes_calico::resources::BGPPeer[dc-1,identifier=/cluster/dc-1/calicoctl/kc1-calicoctl/bgp-peer/data-network-internet1-1]",
  "yang::Resource[kc3-router,name=back-bone-1-3]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-udm-config-map]",
  "kubernetes::resources::Namespace[dc-2,identifier=/cluster/dc-2/namespace/ueransim-gnb-1]",
  "std::File[kc1-host,path=/tmp/tap-201-3.1001.sh]",
  "kubernetes_calico::resources::IPPool[dc-2,identifier=/cluster/dc-2/calicoctl/kc2-calicoctl/ippool/reserved-data-network-internet1-1]",
  "lsm::LifecycleTransfer[internal,instance_id=31081e23-f421-4e06-ad14-cc4895ef3da3]",
  "kubernetes::resources::ConfigMap[dc-2,identifier=/cluster/dc-2/namespace/ueransim-gnb-1/config-map/ueransim-gnb-0x11-config-map]",
  "std::File[kc3-host,path=/tmp/tap-203-3.1001.sh]",
  "exec::Run[kc2-host,command=ip route add 10.2.0.0/24 via 10.1.11.2]",
  "yang::Resource[kc1-router,name=back-bone-1-1]",
  "kubernetes_calico::resources::FelixConfiguration[dc-2,identifier=/cluster/dc-2/calicoctl/kc2-calicoctl/felix-configuration/default]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-nssf-config-map]",
  "kubernetes::resources::Deployment[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/deployment/open5gs-ausf-deployment]",
  "kubernetes_calico::resources::BGPPeer[dc-1,identifier=/cluster/dc-1/calicoctl/kc1-calicoctl/bgp-peer/back-bone-1-1]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-smf-config-map]",
  "kubernetes::resources::Deployment[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/deployment/open5gs-udr-deployment]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-udr-config-map]",
  "kubernetes_calico::resources::IPPool[dc-2,identifier=/cluster/dc-2/calicoctl/kc2-calicoctl/ippool/bb1-ip-pool-2]",
  "lsm::LifecycleTransfer[internal,instance_id=fc297216-2fda-4e52-96d3-d6a740f50bbc]",
  "lsm::LifecycleTransfer[internal,instance_id=9fecf8cb-3c85-4118-ad14-1c0ecc73f378]",
  "kubernetes::resources::Deployment[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/deployment/open5gs-udm-deployment]",
  "kubernetes_calico::resources::BGPPeer[dc-2,identifier=/cluster/dc-2/calicoctl/kc2-calicoctl/bgp-peer/back-bone-1-2]",
  "kubernetes::resources::Service[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/service/open5gs-web-ui-svc-pool]",
  "kubernetes_calico::resources::BGPConfiguration[dc-3,identifier=/cluster/dc-3/calicoctl/kc3-calicoctl/bgp-configuration/default]",
  "kubernetes::resources::StatefulSet[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/stateful-set/open5gs-web-ui-stateful-set]",
  "kubernetes::resources::StatefulSet[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/stateful-set/open5gs-amf-stateful-set]",
  "kubernetes_calico::resources::BGPConfiguration[dc-2,identifier=/cluster/dc-2/calicoctl/kc2-calicoctl/bgp-configuration/default]",
  "kubernetes::resources::ConfigMap[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1/config-map/open5gs-web-client-agent-config-map]",
  "kubernetes_calico::resources::BGPConfiguration[dc-1,identifier=/cluster/dc-1/calicoctl/kc1-calicoctl/bgp-configuration/default]",
  "lsm::LifecycleTransfer[internal,instance_id=13784871-6f6a-4fba-b83e-f4c07c575ed1]",
  "kubernetes::resources::Namespace[dc-1,identifier=/cluster/dc-1/namespace/control-plane-1]",
];
